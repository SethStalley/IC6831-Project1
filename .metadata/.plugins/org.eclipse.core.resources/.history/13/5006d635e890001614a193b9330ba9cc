package team_identifier;

import java.util.ArrayList;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

public class SoccerFieldDetector extends GeneralDetector{
		private ArrayList<Mat> processedFrames;
		
	 	public SoccerFieldDetector(){
	 		this.processedFrames = new ArrayList<Mat>();
	 	}
	 	
		@Override
		public void Detect(ArrayList<Mat> frames) {
			ArrayList<Mat> preparedFrames = getPreparedFrames(frames);
		
			for(Mat frame:preparedFrames){
				Mat temp = frame;
				temp = dilate(temp);
				temp = imfill(temp);
				temp = bwareopen(temp);
				this.processedFrames.add(temp);
			}
			
		}

		/**
	     * Find and fill the contours of the players in the field.
	     * @param: Image to be filled (Mat).
	     * @return - Image with the holes filled (Mat).
	     */
		public Mat imfill(Mat mask){
			Mat result, hierarchy, destiny;
			result = new Mat(mask.rows(), mask.cols(), mask.type());
			destiny = new Mat(mask.rows(), mask.cols(), mask.type());
			hierarchy = new Mat();
			
			ArrayList<MatOfPoint> contours = new ArrayList<>();
			Core.bitwise_not(mask, result);
			Imgproc.findContours(result, contours, hierarchy, Imgproc.RETR_CCOMP, Imgproc.CHAIN_APPROX_SIMPLE);
			
			for(MatOfPoint contour:contours){
				ArrayList<MatOfPoint> list = new ArrayList<>();
				list.add(contour);
				Imgproc.drawContours(result, list, 0, new Scalar(255),-1);
			}
			Core.bitwise_not(result, destiny);
			return destiny;
		}
		
		/**
	     * Fill small spurious regions 
	     * @param X: Image to be filled (Mat).
	     * @return - Image with small regions filled (Mat).
	     */
		public Mat bwareopen(Mat mask){
			Core.bitwise_not(mask, mask);
			Mat result = imfill(mask);
			Core.bitwise_not(result, result);
			return result;
		}
		
		/**
	     * 
	     * @param X: 
	     * @return -
	     */
		public Mat dilate(Mat hsv){
			int dilation_size = 2;
			Mat result = new Mat(hsv.rows(), hsv.cols(), hsv.type());
			
			Mat kernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(2*dilation_size + 1, 2*dilation_size+1));
	        Imgproc.dilate(hsv, result, kernel);
	    
	        return result;

		}
		
		public ArrayList<Mat> getProcessedFrames(){
			return this.processedFrames;
		}

}
