package team_identifier;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

public class ImageProcessor {
	private ArrayList<Mat> frames;
	private ArrayList<Mat> framesHsv;
	private ArrayList<Mat> masks;
	private ArrayList<Mat> normalizedHsv;

	
	public ImageProcessor(ArrayList<Mat> frames){
		this.frames = frames;
		this.framesHsv = new ArrayList<Mat>();
		this.masks = new ArrayList<Mat>();
		this.normalizedHsv = new ArrayList<Mat>();
	}
    
	/**
     * Extract Hue Channel from HSV image
     * @param X: HSV Image (Mat)
     * @return - Hue Channel of the image (Mat)
     */
	public Mat getHueChannel(Mat hsv){
		List<Mat> channels = new Vector<Mat>();
		Core.split(hsv, channels);
		
		return channels.get(0);
	}
		
	/**
     * Convert frames to HSV color model
     */
	public void convertFramesToHsv(){
		for(Mat frame:frames){
			framesHsv.add(getHueChannel(convertRgb2Hsv(frame)));
		}
	}
		
	//Converts a RGB Mat to HSV
	public Mat convertRgb2Hsv(Mat frame) {
		Mat frameHsv = new Mat(frame.height(), frame.width(), frame.type());
		Imgproc.cvtColor(frame, frameHsv, Imgproc.COLOR_RGB2HSV);
		return frameHsv;
	}
		
	// Get a binary mask of green pixels
	public Mat getRange(Mat image){
		Mat mask = new Mat();
		
		Scalar lowerGreen = new Scalar(35, 50, 50);
		Scalar upperGreen = new Scalar(70, 255, 255);
		Core.inRange(image, lowerGreen, upperGreen, mask);
		
		return mask;		
	}
		
	public void addMask(){
		for(Mat frame: framesHsv){
			masks.add(getRange(frame));
		}
	}
		
	// Morphological Transformations 
	public Mat dilate(Mat hsv){
		int dilation_size = 2;
		Mat result = new Mat(hsv.rows(), hsv.cols(), hsv.type());
		
		Mat kernel = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(2*dilation_size + 1, 2*dilation_size+1));
	    Imgproc.dilate(hsv, result, kernel);
	   
	    return result;

	}
		
	// Soccer Players Detection
	public Mat normalizeFrame(Mat hsv){
		int cols = hsv.cols();
		int rows = hsv.rows();

		Mat dest = new Mat(rows, cols, hsv.type());
			
		for(int row = 0; row<rows; row++){
			for(int col = 0; col<cols; col++){
				double[] channels = hsv.get(row, col);
				double[] normalizedChannels = new double[]{(int)((channels[0]/360) * 255), 0, 0};
                dest.put(row, col, normalizedChannels);
			}			
		}
		return dest;
	}
		
	public void normalize(){
		for(Mat hsv: framesHsv){
			normalizedHsv.add(normalizeFrame(hsv));
		}
	}
		
	public Mat stdfilt(Mat image){
	  Mat image32f = new Mat();
	  image.convertTo(image32f, CvType.CV_32F);

	  Mat mu = new Mat();
	  Mat mu2 = new Mat();
	  Imgproc.blur(image32f, mu, new Size(3, 3));
      Imgproc.blur(image32f.mul(image32f), mu2, new Size(3, 3));

      Mat sigma = new Mat();
      Mat src = new Mat();
	      
      Core.subtract(mu2, mu.mul(mu), src);
      Core.sqrt(src, sigma);
	      
      Mat image2 = new Mat();
	  sigma.convertTo(image2, image.type());
	      
      return image2;
	}
		
	public Mat truncate(Mat image){
		Mat res = new Mat(image.rows(), image.cols(), image.type());

        res = image;
        Imgproc.threshold(image, res, 0, 255, Imgproc.THRESH_OTSU);
        return res;
	}
		
}
