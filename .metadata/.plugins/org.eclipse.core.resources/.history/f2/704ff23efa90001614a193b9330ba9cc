package team_identifier;

import java.util.ArrayList;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

public class PlayerDetector extends GeneralDetector{
	private ArrayList<Mat> processedPlayers;
	
	public PlayerDetector(){
		this.processedPlayers = new ArrayList<Mat>();
	}
	
	@Override
	public void Detect(ArrayList<Mat> frames) {
		ArrayList<Mat> preparedFrames = getPreparedFrames(frames);
		
		for(Mat frame:preparedFrames){
			Mat temp = frame;
			temp = stdfilt(frame);

		}
	
	}
	
	/**
     * Normalize Image with 0-255 as min-max values.
     * @param X: Image to be normalized (Mat).
     * @return - Image normalized (Mat)
     */	
	 private Mat normalizeImage(Mat image) {
		    Mat clone = image.clone();
		    Core.normalize(clone, clone, 0, 255, Core.NORM_MINMAX);
		    return clone;
		  }

	/**
	* Calculates local variance.
	* @param X: H channel of HSV (Mat)
	* @return - Image corresponding to the local variance
	*/	
	private Mat stdfilt(Mat image) {
	    Mat hueChannel = new Mat();
	    hueChannel = normalizeImage(hueChannel);
	    hueChannel.convertTo(hueChannel, CvType.CV_32F);

	    Mat mu = hueChannel.clone();
	    Imgproc.blur(hueChannel, mu, new Size(3, 3));
	    
	    Mat hueChannel2 = new Mat();
	    hueChannel2 = hueChannel2.clone();
	    Core.multiply(hueChannel, hueChannel, hueChannel2);
	    
	    Mat mu2 = hueChannel2.clone();
	    Imgproc.blur(hueChannel2, mu2, new Size(3, 3));
	    
	    Mat mu22 = mu.clone();
	    Core.multiply(mu, mu, mu22);
	    
	    Mat sub = mu2.clone();
	    Core.subtract(mu2, mu22, sub);
	    
	    Mat standard = sub.clone();
	    Core.sqrt(sub, standard);
	    
	    Mat variance = standard.clone();
	    Core.multiply(standard, standard, variance);

	    return variance;
	  }
	
	/**
     * 
     * @param X: 
     * @return -
     */
	public Mat truncate(Mat image){
		Mat result = new Mat(image.rows(), image.cols(), image.type());

        result = image;
        Imgproc.threshold(image, result, 0, 255, Imgproc.THRESH_OTSU);
        return result;
	}
	
	public ArrayList<Mat> getProcessedPlayers(){
		return this.processedPlayers;
	}

}
